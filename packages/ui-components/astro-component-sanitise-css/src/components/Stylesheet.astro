---
export type SanitizeList =
        "all" |
        "bare"|
        "forms"|
        "assets"|
        "typography"|
        "reducedMotion"|
        "sysUI"|
        "monoUI"
    
export interface Props{
    href: "npm:" | string | string[],
    sanitize?:SanitizeList
}

const sanitizerURLS={
    default:"https://cdn.skypack.dev/sanitize.css",
    forms:"https://unpkg.com/sanitize.css/forms.css",
    assets:"https://unpkg.com/sanitize.css/assets.css",
    typography:"https://unpkg.com/sanitize.css/typography.css",
    reducedMotion:"https://unpkg.com/sanitize.css/reduce-motion.css",
    sysUI:"https://unpkg.com/sanitize.css/system-ui.css",
    monoUI:"https://unpkg.com/sanitize.css/ui-monospace.css"
}

const {href} = Astro.props as {href: string | string[]}

const {sanitize} = Astro.props as {sanitize:SanitizeList}

function handelError(){
    throw new Error('No Stylesheets have been included!')
}

if(!Array.isArray(href) || href.length === 0){
    handelError()
}
/** Normalized href attributes. */
const hrefs = (
    Array.isArray(href) ? href : href ? [ String(href) ] : []
).map(
    href => (
        href.startsWith('npm:')
            ? 'https://cdn.skypack.dev/' + href.slice(4)
        : href
    )
)
/** 
 * Turns the hrefs into [...<link>] tags
 */
const linkHTML = hrefs.map(
    (link)=>(
        <link rel="stylesheet" href={link} />
    )
)

/**
 *  @params path - used as source for the href  
 *  @returns HTMLLinkElement,  
 * 
 **/
const returnLink =(path:string)=> <link rel="stylesheet" href={path} type="text/css" />

/**Global to place the sanitized links into */
let sanitizedArray = []

/**
 * Provides a link for each key in sanitizerURLS
 */
const sanitizeAll = () => {
    Object.entries(sanitizerURLS).forEach(link=>{
        sanitizedArray.push(
            returnLink(link[1])
        )
    })
}

/**
 * Assister function to help push the right sanitized links to the array
 */
const getSanitizeLinks = async (name) =>{
    if(name ==='all'){
       sanitizeAll()
    }
    else if(name === 'bare'){
        sanitizedArray.push(
            returnLink(sanitizerURLS['default'])
        )
    }
    else{
        sanitizedArray.push(
            returnLink(sanitizerURLS['default'])
        )
        sanitizedArray.push(
            returnLink(sanitizerURLS[`${name}`])
        )
    }
}

/**
 * Normalise the sanitize behaviour
 */
const linkSanitizeHTML = (
    sanitize === 'all' 
        ? getSanitizeLinks('all')
    : sanitize === 'bare' 
        ? getSanitizeLinks('bare')
    : sanitize === 'forms' 
        ? getSanitizeLinks('forms')
    : sanitize === 'assets' 
        ? getSanitizeLinks('assets')
    : sanitize === 'typography' 
        ? getSanitizeLinks('typography')
    : sanitize === 'reducedMotion' 
        ? getSanitizeLinks('reducedMotion')
    : sanitize === 'sysUI' 
        ? getSanitizeLinks('sysUI')
    : sanitize === 'monoUI' 
        ? getSanitizeLinks('monoUI')
    : handelError()

)

/**
 * Function to populate the list of sanitized links 
 */
const populateSanitizer = async() =>{
    //  await getSanitizeLinks(sanitize) //This is strange, it runs this twice, no idea why
    const worker = await linkSanitizeHTML
    return sanitizedArray
}

---
    <!-- Populate the generated Stylesheet Links onto the DOM -->
    {linkHTML}
    {await populateSanitizer()}